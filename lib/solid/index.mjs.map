{"version":3,"file":"index.mjs","sources":["../../src/src/core/utils.ts","../../src/src/core/cache.ts","../../src/src/core/environment.ts","../../src/src/core/store.ts","../../src/src/core/resizer.ts","../../src/src/core/scroller.ts","../../src/src/solid/ListItem.tsx","../../src/src/solid/RangedFor.tsx","../../src/src/solid/utils.ts","../../src/src/solid/Virtualizer.tsx","../../src/src/solid/VList.tsx","../../src/src/solid/WindowVirtualizer.tsx"],"sourcesContent":["/** @internal */\nexport const NULL = null;\n\n/** @internal */\nexport const min = Math.min;\n/** @internal */\nexport const max = Math.max;\n/** @internal */\nexport const abs = Math.abs;\n/** @internal */\nexport const values = Object.values;\n/** @internal */\nexport const isArray = Array.isArray;\n/** @internal */\nexport const timeout = setTimeout;\n\n/**\n * @internal\n */\nexport const clamp = (\n  value: number,\n  minValue: number,\n  maxValue: number\n): number => min(maxValue, max(minValue, value));\n\n/**\n * @internal\n */\nexport const sort = <T extends number>(arr: readonly T[]): T[] => {\n  return [...arr].sort((a, b) => a - b);\n};\n\n/**\n * @internal\n */\nexport const median = (arr: number[]): number => {\n  const sorted = sort(arr);\n  const mid = (arr.length / 2) | 0;\n  return sorted.length % 2 === 0\n    ? (sorted[mid - 1]! + sorted[mid]!) / 2\n    : sorted[mid]!;\n};\n\n/**\n * @internal\n */\nexport const microtask: (fn: () => void) => void =\n  typeof queueMicrotask === \"function\"\n    ? queueMicrotask\n    : (fn) => {\n        Promise.resolve().then(fn);\n      };\n\n/**\n * @internal\n */\nexport const debounce = <T extends () => void>(fn: T, ms: number) => {\n  let id: ReturnType<typeof setTimeout> | undefined | null;\n\n  const cancel = () => {\n    if (id != NULL) {\n      clearTimeout(id);\n    }\n  };\n  const debouncedFn = () => {\n    cancel();\n    id = timeout(() => {\n      id = NULL;\n      fn();\n    }, ms);\n  };\n  debouncedFn._cancel = cancel;\n  return debouncedFn;\n};\n\n/**\n * @internal\n */\nexport const once = <F extends (...args: any[]) => any>(fn: F): F => {\n  let called: undefined | boolean;\n  let cache: ReturnType<F>;\n\n  return ((...args) => {\n    if (!called) {\n      called = true;\n      cache = fn(...args);\n    }\n    return cache;\n  }) as F;\n};\n\n/**\n * @internal\n */\nexport const getStyleNumber = (v: string): number => {\n  if (v) {\n    return parseFloat(v);\n  } else {\n    return 0;\n  }\n};\n","import { type InternalCacheSnapshot, type ItemsRange } from \"./types\";\nimport { clamp, max, median, min } from \"./utils\";\n\ntype Writeable<T> = {\n  -readonly [key in keyof T]: Writeable<T[key]>;\n};\n\n/** @internal */\nexport const UNCACHED = -1;\n\n/**\n * @internal\n */\nexport type Cache = {\n  readonly _length: number;\n  // sizes\n  readonly _sizes: number[];\n  readonly _defaultItemSize: number;\n  // offsets\n  readonly _computedOffsetIndex: number;\n  readonly _offsets: number[];\n};\n\nconst fill = (array: number[], length: number, prepend?: boolean): number[] => {\n  const key = prepend ? \"unshift\" : \"push\";\n  for (let i = 0; i < length; i++) {\n    array[key](UNCACHED);\n  }\n  return array;\n};\n\n/**\n * @internal\n */\nexport const getItemSize = (cache: Cache, index: number): number => {\n  const size = cache._sizes[index]!;\n  return size === UNCACHED ? cache._defaultItemSize : size;\n};\n\n/**\n * @internal\n */\nexport const setItemSize = (\n  cache: Writeable<Cache>,\n  index: number,\n  size: number\n): boolean => {\n  const isInitialMeasurement = cache._sizes[index] === UNCACHED;\n  cache._sizes[index] = size;\n  // mark as dirty\n  cache._computedOffsetIndex = min(index, cache._computedOffsetIndex);\n  return isInitialMeasurement;\n};\n\n/**\n * @internal\n */\nexport const computeOffset = (\n  cache: Writeable<Cache>,\n  index: number\n): number => {\n  if (!cache._length) return 0;\n  if (cache._computedOffsetIndex >= index) {\n    return cache._offsets[index]!;\n  }\n\n  if (cache._computedOffsetIndex < 0) {\n    // first offset must be 0 to avoid returning NaN, which can cause infinite rerender.\n    // https://github.com/inokawa/virtua/pull/160\n    cache._offsets[0] = 0;\n    cache._computedOffsetIndex = 0;\n  }\n  let i = cache._computedOffsetIndex;\n  let top = cache._offsets[i]!;\n  while (i < index) {\n    top += getItemSize(cache, i);\n    cache._offsets[++i] = top;\n  }\n  // mark as measured\n  cache._computedOffsetIndex = index;\n  return top;\n};\n\n/**\n * @internal\n */\nexport const computeTotalSize = (cache: Cache): number => {\n  if (!cache._length) return 0;\n  return (\n    computeOffset(cache, cache._length - 1) +\n    getItemSize(cache, cache._length - 1)\n  );\n};\n\n/**\n * @internal\n */\nexport const findIndex = (cache: Cache, offset: number, i: number): number => {\n  while (i >= 0 && i < cache._length) {\n    const itemOffset = computeOffset(cache, i);\n    if (itemOffset <= offset) {\n      if (itemOffset + getItemSize(cache, i) > offset) {\n        break;\n      } else {\n        i++;\n      }\n    } else {\n      i--;\n    }\n  }\n  return clamp(i, 0, cache._length - 1);\n};\n\n/**\n * @internal\n */\nexport const computeRange = (\n  cache: Cache,\n  scrollOffset: number,\n  prevStartIndex: number,\n  viewportSize: number\n): ItemsRange => {\n  const start = findIndex(\n    cache,\n    scrollOffset,\n    // Clamp because prevStartIndex may exceed the limit when children decreased a lot after scrolling\n    min(prevStartIndex, cache._length - 1)\n  );\n  return [start, findIndex(cache, scrollOffset + viewportSize, start)];\n};\n\n/**\n * @internal\n */\nexport const estimateDefaultItemSize = (\n  cache: Writeable<Cache>,\n  startIndex: number\n): number => {\n  let measuredCountBeforeStart = 0;\n  // This function will be called after measurement so measured size array must be longer than 0\n  const measuredSizes = cache._sizes.filter((s, i) => {\n    const isMeasured = s !== UNCACHED;\n    if (isMeasured && i < startIndex) {\n      measuredCountBeforeStart++;\n    }\n    return isMeasured;\n  });\n  const prevDefaultItemSize = cache._defaultItemSize;\n\n  // Discard cache for now\n  cache._computedOffsetIndex = -1;\n\n  // Calculate diff of unmeasured items before start\n  return (\n    ((cache._defaultItemSize = median(measuredSizes)) - prevDefaultItemSize) *\n    max(startIndex - measuredCountBeforeStart, 0)\n  );\n};\n\n/**\n * @internal\n */\nexport const initCache = (\n  length: number,\n  itemSize: number,\n  snapshot?: InternalCacheSnapshot\n): Cache => {\n  return {\n    _defaultItemSize: snapshot ? snapshot[1] : itemSize,\n    _sizes:\n      snapshot && snapshot[0]\n        ? // https://github.com/inokawa/virtua/issues/441\n          fill(\n            snapshot[0].slice(0, min(length, snapshot[0].length)),\n            max(0, length - snapshot[0].length)\n          )\n        : fill([], length),\n    _length: length,\n    _computedOffsetIndex: -1,\n    _offsets: fill([], length),\n  };\n};\n\n/**\n * @internal\n */\nexport const takeCacheSnapshot = (cache: Cache): InternalCacheSnapshot => {\n  return [[...cache._sizes], cache._defaultItemSize];\n};\n\n/**\n * @internal\n */\nexport const updateCacheLength = (\n  cache: Writeable<Cache>,\n  length: number,\n  isShift?: boolean\n): number => {\n  const diff = length - cache._length;\n\n  cache._computedOffsetIndex = isShift\n    ? // Discard cache for now\n      -1\n    : min(length - 1, cache._computedOffsetIndex);\n  cache._length = length;\n\n  if (diff > 0) {\n    // Added\n    fill(cache._offsets, diff);\n    fill(cache._sizes, diff, isShift);\n    return cache._defaultItemSize * diff;\n  } else {\n    // Removed\n    cache._offsets.splice(diff);\n    return (\n      isShift ? cache._sizes.splice(0, -diff) : cache._sizes.splice(diff)\n    ).reduce(\n      (acc, removed) =>\n        acc - (removed === UNCACHED ? cache._defaultItemSize : removed),\n      0\n    );\n  }\n};\n","import { once } from \"./utils\";\n\n/**\n * @internal\n */\nexport const isBrowser = typeof window !== \"undefined\";\n\nconst getDocumentElement = () => document.documentElement;\n\n/**\n * @internal\n */\nexport const getCurrentDocument = (node: HTMLElement): Document =>\n  node.ownerDocument;\n\n/**\n * @internal\n */\nexport const getCurrentWindow = (doc: Document) => doc.defaultView!;\n\n/**\n * @internal\n */\nexport const isRTLDocument = /*#__PURE__*/ once((): boolean => {\n  // TODO support SSR in rtl\n  return isBrowser\n    ? getComputedStyle(getDocumentElement()).direction === \"rtl\"\n    : false;\n});\n\n/**\n * Currently, all browsers on iOS/iPadOS are WebKit, including WebView.\n * @internal\n */\nexport const isIOSWebKit = /*#__PURE__*/ once((): boolean => {\n  return /iP(hone|od|ad)/.test(navigator.userAgent);\n});\n\n/**\n * @internal\n */\nexport const isSmoothScrollSupported = /*#__PURE__*/ once((): boolean => {\n  return \"scrollBehavior\" in getDocumentElement().style;\n});\n","import {\n  initCache,\n  getItemSize as _getItemSize,\n  computeTotalSize,\n  computeOffset as computeStartOffset,\n  UNCACHED,\n  setItemSize,\n  estimateDefaultItemSize,\n  updateCacheLength,\n  computeRange,\n  takeCacheSnapshot,\n} from \"./cache\";\nimport { isIOSWebKit } from \"./environment\";\nimport type {\n  CacheSnapshot,\n  InternalCacheSnapshot,\n  ItemResize,\n  ItemsRange,\n} from \"./types\";\nimport { abs, max, min, NULL } from \"./utils\";\n\n/** @internal */\nexport const SCROLL_IDLE = 0;\n/** @internal */\nexport const SCROLL_DOWN = 1;\n/** @internal */\nexport const SCROLL_UP = 2;\n/** @internal */\nexport type ScrollDirection =\n  | typeof SCROLL_IDLE\n  | typeof SCROLL_DOWN\n  | typeof SCROLL_UP;\n\nconst SCROLL_BY_NATIVE = 0;\nconst SCROLL_BY_MANUAL_SCROLL = 1;\nconst SCROLL_BY_SHIFT = 2;\ntype ScrollMode =\n  | typeof SCROLL_BY_NATIVE\n  | typeof SCROLL_BY_MANUAL_SCROLL\n  | typeof SCROLL_BY_SHIFT;\n\n/** @internal */\nexport const ACTION_SCROLL = 1;\n/** @internal */\nexport const ACTION_SCROLL_END = 2;\n/** @internal */\nexport const ACTION_ITEM_RESIZE = 3;\n/** @internal */\nexport const ACTION_VIEWPORT_RESIZE = 4;\n/** @internal */\nexport const ACTION_ITEMS_LENGTH_CHANGE = 5;\n/** @internal */\nexport const ACTION_START_OFFSET_CHANGE = 6;\n/** @internal */\nexport const ACTION_MANUAL_SCROLL = 7;\n/** @internal */\nexport const ACTION_BEFORE_MANUAL_SMOOTH_SCROLL = 8;\n\ntype Actions =\n  | [type: typeof ACTION_SCROLL, offset: number]\n  | [type: typeof ACTION_SCROLL_END, dummy?: void]\n  | [type: typeof ACTION_ITEM_RESIZE, entries: ItemResize[]]\n  | [type: typeof ACTION_VIEWPORT_RESIZE, size: number]\n  | [\n      type: typeof ACTION_ITEMS_LENGTH_CHANGE,\n      arg: [length: number, isShift?: boolean | undefined],\n    ]\n  | [type: typeof ACTION_START_OFFSET_CHANGE, offset: number]\n  | [type: typeof ACTION_MANUAL_SCROLL, dummy?: void]\n  | [type: typeof ACTION_BEFORE_MANUAL_SMOOTH_SCROLL, offset: number];\n\n/** @internal */\nexport const UPDATE_VIRTUAL_STATE = 0b0001;\n/** @internal */\nexport const UPDATE_SIZE_EVENT = 0b0010;\n/** @internal */\nexport const UPDATE_SCROLL_EVENT = 0b0100;\n/** @internal */\nexport const UPDATE_SCROLL_END_EVENT = 0b1000;\n\n/**\n * @internal\n */\nexport const getScrollSize = (store: VirtualStore): number => {\n  return max(store._getTotalSize(), store._getViewportSize());\n};\n\n/**\n * @internal\n */\nexport const getOverscanedRange = (\n  startIndex: number,\n  endIndex: number,\n  overscan: number,\n  scrollDirection: ScrollDirection,\n  count: number\n): ItemsRange => {\n  if (scrollDirection !== SCROLL_DOWN) {\n    startIndex -= max(0, overscan);\n  }\n  if (scrollDirection !== SCROLL_UP) {\n    endIndex += max(0, overscan);\n  }\n  return [max(startIndex, 0), min(endIndex, count - 1)];\n};\n\ntype Subscriber = (sync?: boolean) => void;\n\n/** @internal */\nexport type StateVersion = readonly [];\n\n/**\n * @internal\n */\nexport type VirtualStore = {\n  _getStateVersion(): StateVersion;\n  _getCacheSnapshot(): CacheSnapshot;\n  _getRange(): ItemsRange;\n  _isUnmeasuredItem(index: number): boolean;\n  _isInitialMeasurementDone(): boolean;\n  _hasUnmeasuredItemsInFrozenRange(): boolean;\n  _getItemOffset(index: number): number;\n  _getItemSize(index: number): number;\n  _getItemsLength(): number;\n  _getScrollOffset(): number;\n  _getScrollDirection(): ScrollDirection;\n  _getViewportSize(): number;\n  _getStartSpacerSize(): number;\n  _getTotalSize(): number;\n  _getJumpCount(): number;\n  _flushJump(): [number, boolean];\n  _subscribe(target: number, cb: Subscriber): () => void;\n  _update(...action: Actions): void;\n};\n\n/**\n * @internal\n */\nexport const createVirtualStore = (\n  elementsCount: number,\n  itemSize: number = 40,\n  ssrCount: number = 0,\n  cacheSnapshot?: CacheSnapshot | undefined,\n  shouldAutoEstimateItemSize: boolean = false\n): VirtualStore => {\n  let isSSR = !!ssrCount;\n  let stateVersion: StateVersion = [];\n  let viewportSize = 0;\n  let startSpacerSize = 0;\n  let scrollOffset = 0;\n  let jumpCount = 0;\n  let jump = 0;\n  let pendingJump = 0;\n  let _flushedJump = 0;\n  let _scrollDirection: ScrollDirection = SCROLL_IDLE;\n  let _scrollMode: ScrollMode = SCROLL_BY_NATIVE;\n  let _frozenRange: ItemsRange | null = isSSR\n    ? [0, max(ssrCount - 1, 0)]\n    : NULL;\n  let _prevRange: ItemsRange = [0, 0];\n  let _totalMeasuredSize = 0;\n\n  const cache = initCache(\n    elementsCount,\n    itemSize,\n    cacheSnapshot as unknown as InternalCacheSnapshot | undefined\n  );\n  const subscribers = new Set<[number, Subscriber]>();\n  const getRelativeScrollOffset = () => scrollOffset - startSpacerSize;\n  const getRange = (offset: number) => {\n    return computeRange(cache, offset, _prevRange[0], viewportSize);\n  };\n  const getTotalSize = (): number => computeTotalSize(cache);\n  const getItemOffset = (index: number): number => {\n    return computeStartOffset(cache, index) - pendingJump;\n  };\n  const getItemSize = (index: number): number => {\n    return _getItemSize(cache, index);\n  };\n\n  const applyJump = (j: number) => {\n    if (j) {\n      // In iOS WebKit browsers, updating scroll position will stop scrolling so it have to be deferred during scrolling.\n      if (isIOSWebKit() && _scrollDirection !== SCROLL_IDLE) {\n        pendingJump += j;\n      } else {\n        jump += j;\n        jumpCount++;\n      }\n    }\n  };\n\n  return {\n    _getStateVersion() {\n      return stateVersion;\n    },\n    _getCacheSnapshot() {\n      return takeCacheSnapshot(cache) as unknown as CacheSnapshot;\n    },\n    _getRange() {\n      // Return previous range for consistent render until next scroll event comes in.\n      if (_flushedJump) {\n        return _prevRange;\n      }\n      _prevRange = getRange(\n        max(0, getRelativeScrollOffset() + pendingJump + jump)\n      );\n\n      if (_frozenRange) {\n        return [\n          min(_prevRange[0], _frozenRange[0]),\n          max(_prevRange[1], _frozenRange[1]),\n        ];\n      }\n      return _prevRange;\n    },\n    _isUnmeasuredItem(index) {\n      return cache._sizes[index] === UNCACHED;\n    },\n    _isInitialMeasurementDone() {\n      return !!viewportSize;\n    },\n    _hasUnmeasuredItemsInFrozenRange() {\n      if (!_frozenRange) return false;\n      return cache._sizes\n        .slice(\n          max(0, _frozenRange[0] - 1),\n          min(cache._length - 1, _frozenRange[1] + 1) + 1\n        )\n        .includes(UNCACHED);\n    },\n    _getItemOffset: getItemOffset,\n    _getItemSize: getItemSize,\n    _getItemsLength() {\n      return cache._length;\n    },\n    _getScrollOffset() {\n      return scrollOffset;\n    },\n    _getScrollDirection() {\n      return _scrollDirection;\n    },\n    _getViewportSize() {\n      return viewportSize;\n    },\n    _getStartSpacerSize() {\n      return startSpacerSize;\n    },\n    _getTotalSize: getTotalSize,\n    _getJumpCount() {\n      return jumpCount;\n    },\n    _flushJump() {\n      _flushedJump = jump;\n      jump = 0;\n      return [\n        _flushedJump,\n        // Use absolute position not to exceed scrollable bounds\n        _scrollMode === SCROLL_BY_SHIFT ||\n          // https://github.com/inokawa/virtua/discussions/475\n          getRelativeScrollOffset() + viewportSize >= getTotalSize(),\n      ];\n    },\n    _subscribe(target, cb) {\n      const sub: [number, Subscriber] = [target, cb];\n      subscribers.add(sub);\n      return () => {\n        subscribers.delete(sub);\n      };\n    },\n    _update(type, payload): void {\n      let shouldFlushPendingJump: boolean | undefined;\n      let shouldSync: boolean | undefined;\n      let mutated = 0;\n\n      switch (type) {\n        case ACTION_SCROLL: {\n          const flushedJump = _flushedJump;\n          _flushedJump = 0;\n\n          const delta = payload - scrollOffset;\n          const distance = abs(delta);\n\n          // Scroll event after jump compensation is not reliable because it may result in the opposite direction.\n          // The delta of artificial scroll may not be equal with the jump because it may be batched with other scrolls.\n          // And at least in latest Chrome/Firefox/Safari in 2023, setting value to scrollTop/scrollLeft can lose subpixel because its integer (sometimes float probably depending on dpr).\n          const isJustJumped = flushedJump && distance < abs(flushedJump) + 1;\n\n          // Scroll events are dispatched enough so it's ok to skip some of them.\n          if (\n            !isJustJumped &&\n            // Ignore until manual scrolling\n            _scrollMode === SCROLL_BY_NATIVE\n          ) {\n            _scrollDirection = delta < 0 ? SCROLL_UP : SCROLL_DOWN;\n          }\n\n          // TODO This will cause glitch in reverse infinite scrolling. Disable this until better solution is found.\n          // if (\n          //   pendingJump &&\n          //   ((_scrollDirection === SCROLL_UP &&\n          //     payload - max(pendingJump, 0) <= 0) ||\n          //     (_scrollDirection === SCROLL_DOWN &&\n          //       payload - min(pendingJump, 0) >= getScrollOffsetMax()))\n          // ) {\n          //   // Flush if almost reached to start or end\n          //   shouldFlushPendingJump = true;\n          // }\n\n          if (isSSR) {\n            _frozenRange = NULL;\n            isSSR = false;\n          }\n\n          scrollOffset = payload;\n          mutated = UPDATE_SCROLL_EVENT;\n\n          // Skip if offset is not changed\n          // Scroll offset may exceed min or max especially in Safari's elastic scrolling.\n          const relativeOffset = getRelativeScrollOffset();\n          if (\n            relativeOffset >= -viewportSize &&\n            relativeOffset <= getTotalSize()\n          ) {\n            mutated += UPDATE_VIRTUAL_STATE;\n\n            // Update synchronously if scrolled a lot\n            shouldSync = distance > viewportSize;\n          }\n          break;\n        }\n        case ACTION_SCROLL_END: {\n          mutated = UPDATE_SCROLL_END_EVENT;\n          if (_scrollDirection !== SCROLL_IDLE) {\n            shouldFlushPendingJump = true;\n            mutated += UPDATE_VIRTUAL_STATE;\n          }\n          _scrollDirection = SCROLL_IDLE;\n          _scrollMode = SCROLL_BY_NATIVE;\n          _frozenRange = NULL;\n          break;\n        }\n        case ACTION_ITEM_RESIZE: {\n          const updated = payload.filter(\n            ([index, size]) => cache._sizes[index] !== size\n          );\n\n          // Skip if all items are cached and not updated\n          if (!updated.length) {\n            break;\n          }\n\n          // Calculate jump by resize to minimize junks in appearance\n          applyJump(\n            updated.reduce((acc, [index, size]) => {\n              if (\n                // Keep distance from end during shifting\n                _scrollMode === SCROLL_BY_SHIFT ||\n                (_frozenRange\n                  ? // https://github.com/inokawa/virtua/issues/380\n                    index < _frozenRange[0]\n                  : // Otherwise we should maintain visible position\n                    getItemOffset(index) +\n                      // https://github.com/inokawa/virtua/issues/385\n                      (_scrollDirection === SCROLL_IDLE &&\n                      _scrollMode === SCROLL_BY_NATIVE\n                        ? getItemSize(index)\n                        : 0) <\n                    getRelativeScrollOffset())\n              ) {\n                acc += size - getItemSize(index);\n              }\n              return acc;\n            }, 0)\n          );\n\n          // Update item sizes\n          for (const [index, size] of updated) {\n            const prevSize = getItemSize(index);\n            const isInitialMeasurement = setItemSize(cache, index, size);\n\n            if (shouldAutoEstimateItemSize) {\n              _totalMeasuredSize += isInitialMeasurement\n                ? size\n                : size - prevSize;\n            }\n          }\n\n          // Estimate initial item size from measured sizes\n          if (\n            shouldAutoEstimateItemSize &&\n            viewportSize &&\n            // If the total size is lower than the viewport, the item may be a empty state\n            _totalMeasuredSize > viewportSize\n          ) {\n            applyJump(estimateDefaultItemSize(cache, _prevRange[0]));\n            shouldAutoEstimateItemSize = false;\n          }\n\n          mutated = UPDATE_VIRTUAL_STATE + UPDATE_SIZE_EVENT;\n\n          // Synchronous update is necessary in current design to minimize visible glitch in concurrent rendering.\n          // However in React, synchronous update with flushSync after asynchronous update will overtake the asynchronous one.\n          // If items resize happens just after scroll, race condition can occur depending on implementation.\n          shouldSync = true;\n          break;\n        }\n        case ACTION_VIEWPORT_RESIZE: {\n          if (viewportSize !== payload) {\n            viewportSize = payload;\n            mutated = UPDATE_VIRTUAL_STATE + UPDATE_SIZE_EVENT;\n          }\n          break;\n        }\n        case ACTION_ITEMS_LENGTH_CHANGE: {\n          if (payload[1]) {\n            applyJump(updateCacheLength(cache, payload[0], true));\n            _scrollMode = SCROLL_BY_SHIFT;\n            mutated = UPDATE_VIRTUAL_STATE;\n          } else {\n            updateCacheLength(cache, payload[0]);\n          }\n          break;\n        }\n        case ACTION_START_OFFSET_CHANGE: {\n          startSpacerSize = payload;\n          break;\n        }\n        case ACTION_MANUAL_SCROLL: {\n          _scrollMode = SCROLL_BY_MANUAL_SCROLL;\n          break;\n        }\n        case ACTION_BEFORE_MANUAL_SMOOTH_SCROLL: {\n          _frozenRange = getRange(payload);\n          mutated = UPDATE_VIRTUAL_STATE;\n          break;\n        }\n      }\n\n      if (mutated) {\n        stateVersion = [];\n\n        if (shouldFlushPendingJump && pendingJump) {\n          jump += pendingJump;\n          pendingJump = 0;\n          jumpCount++;\n        }\n\n        subscribers.forEach(([target, cb]) => {\n          // Early return to skip React's computation\n          if (!(mutated & target)) {\n            return;\n          }\n          // https://github.com/facebook/react/issues/25191\n          // https://github.com/facebook/react/blob/a5fc797db14c6e05d4d5c4dbb22a0dd70d41f5d5/packages/react-reconciler/src/ReactFiberWorkLoop.js#L1443-L1447\n          cb(shouldSync);\n        });\n      }\n    },\n  };\n};\n","import { getCurrentDocument, getCurrentWindow } from \"./environment\";\nimport {\n  ACTION_ITEM_RESIZE,\n  ACTION_VIEWPORT_RESIZE,\n  type VirtualStore,\n} from \"./store\";\nimport { type ItemResize } from \"./types\";\nimport { max, NULL } from \"./utils\";\n\nconst createResizeObserver = (cb: ResizeObserverCallback) => {\n  let ro: ResizeObserver | undefined;\n\n  return {\n    _observe(e: HTMLElement) {\n      // Initialize ResizeObserver lazily for SSR\n      // https://www.w3.org/TR/resize-observer/#intro\n      (\n        ro ||\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1491739\n        (ro = new (getCurrentWindow(getCurrentDocument(e)).ResizeObserver)(cb))\n      ).observe(e);\n    },\n    _unobserve(e: HTMLElement) {\n      ro!.unobserve(e);\n    },\n    _dispose() {\n      ro && ro.disconnect();\n    },\n  };\n};\n\n/**\n * @internal\n */\nexport type ItemResizeObserver = (el: HTMLElement, i: number) => () => void;\n\ninterface ListResizer {\n  _observeRoot(viewportElement: HTMLElement): void;\n  _observeItem: ItemResizeObserver;\n  _dispose(): void;\n}\n\n/**\n * @internal\n */\nexport const createResizer = (\n  store: VirtualStore,\n  isHorizontal: boolean\n): ListResizer => {\n  let viewportElement: HTMLElement | undefined;\n  const sizeKey = isHorizontal ? \"width\" : \"height\";\n  const mountedIndexes = new WeakMap<Element, number>();\n\n  const resizeObserver = createResizeObserver((entries) => {\n    const resizes: ItemResize[] = [];\n    for (const { target, contentRect } of entries) {\n      // Skip zero-sized rects that may be observed under `display: none` style\n      if (!(target as HTMLElement).offsetParent) continue;\n\n      if (target === viewportElement) {\n        store._update(ACTION_VIEWPORT_RESIZE, contentRect[sizeKey]);\n      } else {\n        const index = mountedIndexes.get(target);\n        if (index != NULL) {\n          resizes.push([index, contentRect[sizeKey]]);\n        }\n      }\n    }\n\n    if (resizes.length) {\n      store._update(ACTION_ITEM_RESIZE, resizes);\n    }\n  });\n\n  return {\n    _observeRoot(viewport: HTMLElement) {\n      resizeObserver._observe((viewportElement = viewport));\n    },\n    _observeItem: (el: HTMLElement, i: number) => {\n      mountedIndexes.set(el, i);\n      resizeObserver._observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        resizeObserver._unobserve(el);\n      };\n    },\n    _dispose: resizeObserver._dispose,\n  };\n};\n\ninterface WindowListResizer {\n  _observeRoot(container: HTMLElement): void;\n  _observeItem: ItemResizeObserver;\n  _dispose(): void;\n}\n\n/**\n * @internal\n */\nexport const createWindowResizer = (\n  store: VirtualStore,\n  isHorizontal: boolean\n): WindowListResizer => {\n  const sizeKey = isHorizontal ? \"width\" : \"height\";\n  const windowSizeKey = isHorizontal ? \"innerWidth\" : \"innerHeight\";\n  const mountedIndexes = new WeakMap<Element, number>();\n\n  const resizeObserver = createResizeObserver((entries) => {\n    const resizes: ItemResize[] = [];\n    for (const { target, contentRect } of entries) {\n      // Skip zero-sized rects that may be observed under `display: none` style\n      if (!(target as HTMLElement).offsetParent) continue;\n\n      const index = mountedIndexes.get(target);\n      if (index != NULL) {\n        resizes.push([index, contentRect[sizeKey]]);\n      }\n    }\n\n    if (resizes.length) {\n      store._update(ACTION_ITEM_RESIZE, resizes);\n    }\n  });\n\n  let cleanupOnWindowResize: (() => void) | undefined;\n\n  return {\n    _observeRoot(container) {\n      const window = getCurrentWindow(getCurrentDocument(container));\n      const onWindowResize = () => {\n        store._update(ACTION_VIEWPORT_RESIZE, window[windowSizeKey]);\n      };\n      window.addEventListener(\"resize\", onWindowResize);\n      onWindowResize();\n\n      cleanupOnWindowResize = () => {\n        window.removeEventListener(\"resize\", onWindowResize);\n      };\n    },\n    _observeItem: (el: HTMLElement, i: number) => {\n      mountedIndexes.set(el, i);\n      resizeObserver._observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        resizeObserver._unobserve(el);\n      };\n    },\n    _dispose() {\n      cleanupOnWindowResize && cleanupOnWindowResize();\n      resizeObserver._dispose();\n    },\n  };\n};\n\n/**\n * @internal\n */\nexport const createGridResizer = (\n  vStore: VirtualStore,\n  hStore: VirtualStore\n) => {\n  let viewportElement: HTMLElement | undefined;\n\n  const heightKey = \"height\";\n  const widthKey = \"width\";\n  const mountedIndexes = new WeakMap<\n    Element,\n    [rowIndex: number, colIndex: number]\n  >();\n\n  type CellSize = [height: number, width: number];\n  const maybeCachedRowIndexes = new Set<number>();\n  const maybeCachedColIndexes = new Set<number>();\n  const sizeCache = new Map<string, CellSize>();\n  const getKey = (rowIndex: number, colIndex: number): string =>\n    `${rowIndex}-${colIndex}`;\n\n  const resizeObserver = createResizeObserver((entries) => {\n    const resizedRows = new Set<number>();\n    const resizedCols = new Set<number>();\n    for (const { target, contentRect } of entries) {\n      // Skip zero-sized rects that may be observed under `display: none` style\n      if (!(target as HTMLElement).offsetParent) continue;\n\n      if (target === viewportElement) {\n        vStore._update(ACTION_VIEWPORT_RESIZE, contentRect[heightKey]);\n        hStore._update(ACTION_VIEWPORT_RESIZE, contentRect[widthKey]);\n      } else {\n        const cell = mountedIndexes.get(target);\n        if (cell) {\n          const [rowIndex, colIndex] = cell;\n          const key = getKey(rowIndex, colIndex);\n          const prevSize = sizeCache.get(key);\n          const size: CellSize = [\n            contentRect[heightKey],\n            contentRect[widthKey],\n          ];\n          let rowResized: boolean | undefined;\n          let colResized: boolean | undefined;\n          if (!prevSize) {\n            rowResized = colResized = true;\n          } else {\n            if (prevSize[0] !== size[0]) {\n              rowResized = true;\n            }\n            if (prevSize[1] !== size[1]) {\n              colResized = true;\n            }\n          }\n          if (rowResized) {\n            resizedRows.add(rowIndex);\n          }\n          if (colResized) {\n            resizedCols.add(colIndex);\n          }\n          if (rowResized || colResized) {\n            sizeCache.set(key, size);\n          }\n        }\n      }\n    }\n\n    if (resizedRows.size) {\n      const heightResizes: ItemResize[] = [];\n      resizedRows.forEach((rowIndex) => {\n        let maxHeight = 0;\n        maybeCachedColIndexes.forEach((colIndex) => {\n          const size = sizeCache.get(getKey(rowIndex, colIndex));\n          if (size) {\n            maxHeight = max(maxHeight, size[0]);\n          }\n        });\n        if (maxHeight) {\n          heightResizes.push([rowIndex, maxHeight]);\n        }\n      });\n      vStore._update(ACTION_ITEM_RESIZE, heightResizes);\n    }\n    if (resizedCols.size) {\n      const widthResizes: ItemResize[] = [];\n      resizedCols.forEach((colIndex) => {\n        let maxWidth = 0;\n        maybeCachedRowIndexes.forEach((rowIndex) => {\n          const size = sizeCache.get(getKey(rowIndex, colIndex));\n          if (size) {\n            maxWidth = max(maxWidth, size[1]);\n          }\n        });\n        if (maxWidth) {\n          widthResizes.push([colIndex, maxWidth]);\n        }\n      });\n      hStore._update(ACTION_ITEM_RESIZE, widthResizes);\n    }\n  });\n\n  return {\n    _observeRoot(viewport: HTMLElement) {\n      resizeObserver._observe((viewportElement = viewport));\n    },\n    _observeItem(el: HTMLElement, rowIndex: number, colIndex: number) {\n      mountedIndexes.set(el, [rowIndex, colIndex]);\n      maybeCachedRowIndexes.add(rowIndex);\n      maybeCachedColIndexes.add(colIndex);\n      resizeObserver._observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        resizeObserver._unobserve(el);\n      };\n    },\n    _dispose: resizeObserver._dispose,\n  };\n};\n\n/**\n * @internal\n */\nexport type GridResizer = ReturnType<typeof createGridResizer>;\n","import {\n  getCurrentDocument,\n  getCurrentWindow,\n  isIOSWebKit,\n  isRTLDocument,\n  isSmoothScrollSupported,\n} from \"./environment\";\nimport {\n  ACTION_SCROLL,\n  type VirtualStore,\n  ACTION_SCROLL_END,\n  UPDATE_SIZE_EVENT,\n  ACTION_MANUAL_SCROLL,\n  SCROLL_IDLE,\n  ACTION_BEFORE_MANUAL_SMOOTH_SCROLL,\n  ACTION_START_OFFSET_CHANGE,\n} from \"./store\";\nimport { type ScrollToIndexOpts } from \"./types\";\nimport { debounce, timeout, clamp, microtask } from \"./utils\";\n\n/**\n * scrollLeft is negative value in rtl direction.\n *\n * left  right\n * 0     100    spec compliant (ltr)\n * -100  0      spec compliant (rtl)\n * https://github.com/othree/jquery.rtl-scroll-type\n */\nconst normalizeOffset = (offset: number, isHorizontal: boolean): number => {\n  if (isHorizontal && isRTLDocument()) {\n    return -offset;\n  } else {\n    return offset;\n  }\n};\n\nconst createScrollObserver = (\n  store: VirtualStore,\n  viewport: HTMLElement | Window,\n  isHorizontal: boolean,\n  getScrollOffset: () => number,\n  updateScrollOffset: (\n    value: number,\n    shift: boolean,\n    isMomentumScrolling: boolean\n  ) => void,\n  getStartOffset?: () => number\n) => {\n  const now = Date.now;\n\n  let lastScrollTime = 0;\n  let wheeling = false;\n  let touching = false;\n  let justTouchEnded = false;\n  let stillMomentumScrolling = false;\n\n  const onScrollEnd = debounce(() => {\n    if (wheeling || touching) {\n      wheeling = false;\n\n      // Wait while wheeling or touching\n      onScrollEnd();\n      return;\n    }\n\n    justTouchEnded = false;\n\n    store._update(ACTION_SCROLL_END);\n  }, 150);\n\n  const onScroll = () => {\n    lastScrollTime = now();\n\n    if (justTouchEnded) {\n      stillMomentumScrolling = true;\n    }\n\n    if (getStartOffset) {\n      store._update(ACTION_START_OFFSET_CHANGE, getStartOffset());\n    }\n    store._update(ACTION_SCROLL, getScrollOffset());\n\n    onScrollEnd();\n  };\n\n  // Infer scroll state also from wheel events\n  // Sometimes scroll events do not fire when frame dropped even if the visual have been already scrolled\n  const onWheel = ((e: WheelEvent) => {\n    if (\n      wheeling ||\n      // Scroll start should be detected with scroll event\n      store._getScrollDirection() === SCROLL_IDLE ||\n      // Probably a pinch-to-zoom gesture\n      e.ctrlKey\n    ) {\n      return;\n    }\n\n    const timeDelta = now() - lastScrollTime;\n    if (\n      // Check if wheel event occurs some time after scrolling\n      150 > timeDelta &&\n      50 < timeDelta &&\n      // Get delta before checking deltaMode for firefox behavior\n      // https://github.com/w3c/uievents/issues/181#issuecomment-392648065\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1392460#c34\n      (isHorizontal ? e.deltaX : e.deltaY)\n    ) {\n      wheeling = true;\n    }\n  }) as (e: Event) => void; // FIXME type error. why only here?\n\n  const onTouchStart = () => {\n    touching = true;\n    justTouchEnded = stillMomentumScrolling = false;\n  };\n  const onTouchEnd = () => {\n    touching = false;\n    if (isIOSWebKit()) {\n      justTouchEnded = true;\n    }\n  };\n\n  viewport.addEventListener(\"scroll\", onScroll);\n  viewport.addEventListener(\"wheel\", onWheel, { passive: true });\n  viewport.addEventListener(\"touchstart\", onTouchStart, { passive: true });\n  viewport.addEventListener(\"touchend\", onTouchEnd, { passive: true });\n\n  return {\n    _dispose: () => {\n      viewport.removeEventListener(\"scroll\", onScroll);\n      viewport.removeEventListener(\"wheel\", onWheel);\n      viewport.removeEventListener(\"touchstart\", onTouchStart);\n      viewport.removeEventListener(\"touchend\", onTouchEnd);\n      onScrollEnd._cancel();\n    },\n    _fixScrollJump: () => {\n      const [jump, shift] = store._flushJump();\n      if (!jump) return;\n      updateScrollOffset(\n        normalizeOffset(jump, isHorizontal),\n        shift,\n        stillMomentumScrolling\n      );\n      stillMomentumScrolling = false;\n\n      if (shift && store._getViewportSize() > store._getTotalSize()) {\n        // In this case applying jump may not cause scroll.\n        // Current logic expects scroll event occurs after applying jump so we dispatch it manually.\n        store._update(ACTION_SCROLL, getScrollOffset());\n      }\n    },\n  };\n};\n\ntype ScrollObserver = ReturnType<typeof createScrollObserver>;\n\n/**\n * @internal\n */\nexport type Scroller = {\n  _observe: (viewportElement: HTMLElement) => void;\n  _dispose(): void;\n  _scrollTo: (offset: number) => void;\n  _scrollBy: (offset: number) => void;\n  _scrollToIndex: (index: number, opts?: ScrollToIndexOpts) => void;\n  _fixScrollJump: () => void;\n};\n\n/**\n * @internal\n */\nexport const createScroller = (\n  store: VirtualStore,\n  isHorizontal: boolean\n): Scroller => {\n  let viewportElement: HTMLElement | undefined;\n  let scrollObserver: ScrollObserver | undefined;\n  let cancelScroll: (() => void) | undefined;\n  const scrollOffsetKey = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n  const overflowKey = isHorizontal ? \"overflowX\" : \"overflowY\";\n\n  // The given offset will be clamped by browser\n  // https://drafts.csswg.org/cssom-view/#dom-element-scrolltop\n  const scheduleImperativeScroll = async (\n    getTargetOffset: () => number,\n    smooth?: boolean\n  ) => {\n    if (!viewportElement) {\n      // Wait for element assign. The element may be undefined if scrollRef prop is used and scroll is scheduled on mount.\n      microtask(() => scheduleImperativeScroll(getTargetOffset, smooth));\n      return;\n    }\n\n    if (cancelScroll) {\n      // Cancel waiting scrollTo\n      cancelScroll();\n    }\n\n    const waitForMeasurement = (): [Promise<void>, () => void] => {\n      // Wait for the scroll destination items to be measured.\n      // The measurement will be done asynchronously and the timing is not predictable so we use promise.\n      let queue: (() => void) | undefined;\n      return [\n        new Promise<void>((resolve, reject) => {\n          queue = resolve;\n          cancelScroll = reject;\n\n          // Resize event may not happen when the window/tab is not visible, or during browser back in Safari.\n          // We have to wait for the initial measurement to avoid failing imperative scroll on mount.\n          // https://github.com/inokawa/virtua/issues/450\n          if (store._isInitialMeasurementDone()) {\n            // Reject when items around scroll destination completely measured\n            timeout(reject, 150);\n          }\n        }),\n        store._subscribe(UPDATE_SIZE_EVENT, () => {\n          queue && queue();\n        }),\n      ];\n    };\n\n    if (smooth && isSmoothScrollSupported()) {\n      while (true) {\n        store._update(ACTION_BEFORE_MANUAL_SMOOTH_SCROLL, getTargetOffset());\n\n        if (!store._hasUnmeasuredItemsInFrozenRange()) {\n          break;\n        }\n\n        const [promise, unsubscribe] = waitForMeasurement();\n\n        try {\n          await promise;\n        } catch (e) {\n          // canceled\n          return;\n        } finally {\n          unsubscribe();\n        }\n      }\n\n      viewportElement.scrollTo({\n        [isHorizontal ? \"left\" : \"top\"]: normalizeOffset(\n          getTargetOffset(),\n          isHorizontal\n        ),\n        behavior: \"smooth\",\n      });\n    } else {\n      while (true) {\n        const [promise, unsubscribe] = waitForMeasurement();\n\n        try {\n          viewportElement[scrollOffsetKey] = normalizeOffset(\n            getTargetOffset(),\n            isHorizontal\n          );\n          store._update(ACTION_MANUAL_SCROLL);\n\n          await promise;\n        } catch (e) {\n          // canceled or finished\n          return;\n        } finally {\n          unsubscribe();\n        }\n      }\n    }\n  };\n\n  return {\n    _observe(viewport) {\n      viewportElement = viewport;\n\n      scrollObserver = createScrollObserver(\n        store,\n        viewport,\n        isHorizontal,\n        () => normalizeOffset(viewport[scrollOffsetKey], isHorizontal),\n        (jump, shift, isMomentumScrolling) => {\n          // If we update scroll position while touching on iOS, the position will be reverted.\n          // However iOS WebKit fires touch events only once at the beginning of momentum scrolling.\n          // That means we have no reliable way to confirm still touched or not if user touches more than once during momentum scrolling...\n          // This is a hack for the suspectable situations, inspired by https://github.com/prud/ios-overflow-scroll-to-top\n          if (isMomentumScrolling) {\n            const style = viewport.style;\n            const prev = style[overflowKey];\n            style[overflowKey] = \"hidden\";\n            timeout(() => {\n              style[overflowKey] = prev;\n            });\n          }\n\n          if (shift) {\n            viewport[scrollOffsetKey] = store._getScrollOffset() + jump;\n            // https://github.com/inokawa/virtua/issues/357\n            cancelScroll && cancelScroll();\n          } else {\n            viewport[scrollOffsetKey] += jump;\n          }\n        }\n      );\n    },\n    _dispose() {\n      scrollObserver && scrollObserver._dispose();\n    },\n    _scrollTo(offset) {\n      scheduleImperativeScroll(() => offset);\n    },\n    _scrollBy(offset) {\n      offset += store._getScrollOffset();\n      scheduleImperativeScroll(() => offset);\n    },\n    _scrollToIndex(index, { align, smooth, offset = 0 } = {}) {\n      index = clamp(index, 0, store._getItemsLength() - 1);\n\n      if (align === \"nearest\") {\n        const itemOffset = store._getItemOffset(index);\n        const scrollOffset = store._getScrollOffset();\n\n        if (itemOffset < scrollOffset) {\n          align = \"start\";\n        } else if (\n          itemOffset + store._getItemSize(index) >\n          scrollOffset + store._getViewportSize()\n        ) {\n          align = \"end\";\n        } else {\n          // already completely visible\n          return;\n        }\n      }\n\n      scheduleImperativeScroll(() => {\n        return (\n          offset +\n          store._getStartSpacerSize() +\n          store._getItemOffset(index) +\n          (align === \"end\"\n            ? store._getItemSize(index) - store._getViewportSize()\n            : align === \"center\"\n              ? (store._getItemSize(index) - store._getViewportSize()) / 2\n              : 0)\n        );\n      }, smooth);\n    },\n    _fixScrollJump: () => {\n      scrollObserver && scrollObserver._fixScrollJump();\n    },\n  };\n};\n\n/**\n * @internal\n */\nexport type WindowScroller = {\n  _observe(containerElement: HTMLElement): void;\n  _dispose(): void;\n  _fixScrollJump: () => void;\n  _scrollToIndex: (index: number, opts?: ScrollToIndexOpts) => void;\n};\n\n/**\n * @internal\n */\nexport const createWindowScroller = (\n  store: VirtualStore,\n  isHorizontal: boolean\n): WindowScroller => {\n  let scrollObserver: ScrollObserver | undefined;\n\n  return {\n    _observe(container) {\n      const scrollOffsetKey = isHorizontal ? \"scrollX\" : \"scrollY\";\n\n      const document = getCurrentDocument(container);\n      const window = getCurrentWindow(document);\n      const documentBody = document.body;\n\n      const calcOffsetToViewport = (\n        node: HTMLElement,\n        viewport: HTMLElement,\n        isHorizontal: boolean,\n        offset: number = 0\n      ): number => {\n        // TODO calc offset only when it changes (maybe impossible)\n        const offsetKey = isHorizontal ? \"offsetLeft\" : \"offsetTop\";\n        const offsetSum =\n          offset +\n          (isHorizontal && isRTLDocument()\n            ? window.innerWidth - node[offsetKey] - node.offsetWidth\n            : node[offsetKey]);\n\n        const parent = node.offsetParent;\n        if (node === viewport || !parent) {\n          return offsetSum;\n        }\n\n        return calcOffsetToViewport(\n          parent as HTMLElement,\n          viewport,\n          isHorizontal,\n          offsetSum\n        );\n      };\n\n      scrollObserver = createScrollObserver(\n        store,\n        window,\n        isHorizontal,\n        () => normalizeOffset(window[scrollOffsetKey], isHorizontal),\n        (jump, shift) => {\n          // TODO support case two window scrollers exist in the same view\n          if (shift) {\n            window.scroll({\n              [isHorizontal ? \"left\" : \"top\"]: store._getScrollOffset() + jump,\n            });\n          } else {\n            window.scrollBy(isHorizontal ? jump : 0, isHorizontal ? 0 : jump);\n          }\n        },\n        () => calcOffsetToViewport(container, documentBody, isHorizontal)\n      );\n    },\n    _dispose() {\n      scrollObserver && scrollObserver._dispose();\n    },\n    _fixScrollJump: () => {\n      scrollObserver && scrollObserver._fixScrollJump();\n    },\n    _scrollToIndex: async (index: number, opts: ScrollToIndexOpts = {}) => {\n      // const scrollOffsetKey = isHorizontal ? \"scrollX\" : \"scrollY\";\n      const align = opts.align || \"start\";\n      const smooth = opts.smooth;\n      const offset = opts.offset || 0;\n\n      index = clamp(index, 0, store._getItemsLength() - 1);\n\n      const itemOffset = store._getItemOffset(index);\n      const viewportSize = store._getViewportSize();\n      const itemSize = store._getItemSize(index);\n\n      let targetOffset = itemOffset + offset;\n\n      if (align === \"end\") {\n        targetOffset += itemSize - viewportSize;\n      } else if (align === \"center\") {\n        targetOffset += (itemSize - viewportSize) / 2;\n      } else if (align === \"nearest\") {\n        const scrollOffset = store._getScrollOffset();\n        if (itemOffset < scrollOffset) {\n          targetOffset = itemOffset + offset;\n        } else if (itemOffset + itemSize > scrollOffset + viewportSize) {\n          targetOffset = itemOffset + itemSize - viewportSize + offset;\n        } else {\n          // already completely visible\n          return;\n        }\n      }\n\n      store._update(ACTION_BEFORE_MANUAL_SMOOTH_SCROLL, targetOffset);\n\n      const finalOffset = normalizeOffset(targetOffset, isHorizontal);\n      if (smooth && isSmoothScrollSupported()) {\n        window.scrollTo({\n          [isHorizontal ? \"left\" : \"top\"]: finalOffset,\n          behavior: \"smooth\",\n        });\n      } else {\n        window.scrollTo({\n          [isHorizontal ? \"left\" : \"top\"]: finalOffset,\n        });\n      }\n\n      await new Promise((resolve) => {\n        window.requestAnimationFrame(resolve);\n      });\n\n      store._update(ACTION_MANUAL_SCROLL);\n    },\n  };\n};\n\n/**\n * @internal\n */\nexport type GridScroller = {\n  _observe: (viewportElement: HTMLElement) => void;\n  _dispose(): void;\n  _scrollTo: (offsetX: number, offsetY: number) => void;\n  _scrollBy: (offsetX: number, offsetY: number) => void;\n  _scrollToIndex: (indexX: number, indexY: number) => void;\n  _fixScrollJump: () => void;\n};\n\n/**\n * @internal\n */\nexport const createGridScroller = (\n  vStore: VirtualStore,\n  hStore: VirtualStore\n): GridScroller => {\n  const vScroller = createScroller(vStore, false);\n  const hScroller = createScroller(hStore, true);\n  return {\n    _observe(viewportElement) {\n      vScroller._observe(viewportElement);\n      hScroller._observe(viewportElement);\n    },\n    _dispose() {\n      vScroller._dispose();\n      hScroller._dispose();\n    },\n    _scrollTo(offsetX, offsetY) {\n      vScroller._scrollTo(offsetY);\n      hScroller._scrollTo(offsetX);\n    },\n    _scrollBy(offsetX, offsetY) {\n      vScroller._scrollBy(offsetY);\n      hScroller._scrollBy(offsetX);\n    },\n    _scrollToIndex(indexX, indexY) {\n      vScroller._scrollToIndex(indexY);\n      hScroller._scrollToIndex(indexX);\n    },\n    _fixScrollJump() {\n      vScroller._fixScrollJump();\n      hScroller._fixScrollJump();\n    },\n  };\n};\n","/**\n * @jsxImportSource solid-js\n */\nimport { ItemResizeObserver } from \"../core/resizer\";\nimport { isRTLDocument } from \"../core/environment\";\nimport {\n  Component,\n  JSX,\n  createEffect,\n  createMemo,\n  mergeProps,\n  onCleanup,\n  type ValidComponent,\n} from \"solid-js\";\nimport { Dynamic } from \"solid-js/web\";\n\ninterface ListItemProps {\n  _children: JSX.Element;\n  _resizer: ItemResizeObserver;\n  _index: number;\n  _offset: number;\n  _hide: boolean;\n  _isHorizontal: boolean;\n  _as?: ValidComponent;\n}\n\n/**\n * @internal\n */\nexport const ListItem: Component<ListItemProps> = (props) => {\n  let elementRef: HTMLDivElement | undefined;\n  props = mergeProps<[Partial<ListItemProps>, ListItemProps]>(\n    { _as: \"div\" },\n    props\n  );\n\n  // The index may be changed if elements are inserted to or removed from the start of props.children\n  createEffect(() => {\n    if (!elementRef) return;\n    onCleanup(props._resizer(elementRef, props._index));\n  });\n\n  const style = createMemo(() => {\n    const isHorizontal = props._isHorizontal;\n    const style: JSX.CSSProperties = {\n      margin: 0,\n      padding: 0,\n      position: \"absolute\",\n      [isHorizontal ? \"height\" : \"width\"]: \"100%\",\n      [isHorizontal ? \"top\" : \"left\"]: \"0px\",\n      [isHorizontal ? (isRTLDocument() ? \"right\" : \"left\") : \"top\"]:\n        props._offset + \"px\",\n      visibility: props._hide ? \"hidden\" : \"visible\",\n    };\n    if (isHorizontal) {\n      style.display = \"flex\";\n    }\n    return style;\n  });\n\n  return (\n    <Dynamic component={props._as} ref={elementRef} style={style()}>\n      {props._children}\n    </Dynamic>\n  );\n};\n","/**\n * @jsxImportSource solid-js\n */\nimport {\n  createMemo,\n  createRoot,\n  createSignal,\n  onCleanup,\n  JSX,\n  Signal,\n  Accessor,\n} from \"solid-js\";\nimport { ItemsRange } from \"../core/types\";\n\ninterface RenderedNode<T> {\n  _data: Signal<T>;\n  _element: JSX.Element;\n  _dispose: () => void;\n}\n\n/**\n * https://github.com/solidjs/solid/blob/main/packages/solid/src/reactive/array.ts\n * https://github.com/solidjs/solid/blob/main/packages/solid/src/render/flow.ts\n * https://github.com/solidjs/solid/discussions/366\n * @internal\n */\nexport const RangedFor = <T,>(props: {\n  _each: T[];\n  _range: ItemsRange;\n  _render: (data: Accessor<T>, index: number) => JSX.Element;\n}): JSX.Element => {\n  let prev = new Map<number, RenderedNode<T>>();\n\n  onCleanup(() => {\n    for (const node of prev.values()) {\n      node._dispose();\n    }\n  });\n\n  return createMemo(() => {\n    const list = props._each;\n    const [start, end] = props._range;\n    const current = new Map<number, RenderedNode<T>>();\n    const items: JSX.Element[] = [];\n\n    for (let i = start; i <= end; i++) {\n      const newData: T = list[i]!;\n      const lookup = prev.get(i);\n      items.push(\n        lookup\n          ? lookup._element\n          : createRoot((dispose) => {\n              const data = createSignal(newData);\n              const result = props._render(data[0], i);\n              current.set(i, {\n                _data: data,\n                _element: result,\n                _dispose: dispose,\n              });\n              return result;\n            })\n      );\n      if (lookup) {\n        if (newData !== lookup._data) {\n          lookup._data[1](\n            newData as Exclude<T, Function> // TODO improve type\n          );\n        }\n        current.set(i, lookup);\n      }\n    }\n    for (const [key, node] of prev.entries()) {\n      if (!current.has(key)) {\n        node._dispose();\n      }\n    }\n    prev = current;\n    return items;\n  }) as unknown as JSX.Element; // TODO improve type\n};\n","import { ItemsRange } from \"../core/types\";\n\n/**\n * @internal\n */\nexport const isSameRange = (prev: ItemsRange, next: ItemsRange): boolean => {\n  return prev[0] === next[0] && prev[1] === next[1];\n};\n","/**\n * @jsxImportSource solid-js\n */\nimport {\n  onMount,\n  onCleanup,\n  createEffect,\n  createSignal,\n  createMemo,\n  JSX,\n  on,\n  createComputed,\n  type ValidComponent,\n  mergeProps,\n} from \"solid-js\";\nimport { Dynamic } from \"solid-js/web\";\nimport {\n  SCROLL_IDLE,\n  UPDATE_SCROLL_EVENT,\n  UPDATE_SCROLL_END_EVENT,\n  UPDATE_VIRTUAL_STATE,\n  getOverscanedRange,\n  createVirtualStore,\n  ACTION_ITEMS_LENGTH_CHANGE,\n  getScrollSize,\n  ACTION_START_OFFSET_CHANGE,\n} from \"../core/store\";\nimport { createResizer } from \"../core/resizer\";\nimport { createScroller } from \"../core/scroller\";\nimport { ItemsRange, ScrollToIndexOpts } from \"../core/types\";\nimport { ListItem } from \"./ListItem\";\nimport { RangedFor } from \"./RangedFor\";\nimport { isSameRange } from \"./utils\";\n\n/**\n * Methods of {@link Virtualizer}.\n */\nexport interface VirtualizerHandle {\n  /**\n   * Get current scrollTop or scrollLeft.\n   */\n  readonly scrollOffset: number;\n  /**\n   * Get current scrollHeight or scrollWidth.\n   */\n  readonly scrollSize: number;\n  /**\n   * Get current offsetHeight or offsetWidth.\n   */\n  readonly viewportSize: number;\n  /**\n   * Get item offset from start.\n   * @param index index of item\n   */\n  getItemOffset(index: number): number;\n  /**\n   * Scroll to the item specified by index.\n   * @param index index of item\n   * @param opts options\n   */\n  scrollToIndex(index: number, opts?: ScrollToIndexOpts): void;\n  /**\n   * Scroll to the given offset.\n   * @param offset offset from start\n   */\n  scrollTo(offset: number): void;\n  /**\n   * Scroll by the given offset.\n   * @param offset offset from current position\n   */\n  scrollBy(offset: number): void;\n}\n\n/**\n * Props of {@link Virtualizer}.\n */\nexport interface VirtualizerProps<T> {\n  /**\n   * Get reference to {@link VirtualizerHandle}.\n   */\n  ref?: (handle?: VirtualizerHandle) => void;\n  /**\n   * The data items rendered by this component.\n   */\n  data: T[];\n  /**\n   * The elements renderer function.\n   */\n  children: (data: T, index: number) => JSX.Element;\n  /**\n   * Number of items to render above/below the visible bounds of the list. Lower value will give better performance but you can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * Component or element type for container element.\n   * @defaultValue \"div\"\n   */\n  as?: ValidComponent;\n  /**\n   * Component or element type for item element.\n   * @defaultValue \"div\"\n   */\n  item?: ValidComponent;\n  /**\n   * Reference to the scrollable element. The default will get the parent element of virtualizer.\n   */\n  scrollRef?: HTMLElement;\n  /**\n   * Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.\n   *\n   * - If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.\n   * - If set, you can opt out estimation and use the value as initial item size.\n   */\n  itemSize?: number;\n  /**\n   * While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling.\n   */\n  shift?: boolean;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * If you put an element before virtualizer, you have to define its height with this prop.\n   */\n  startMargin?: number;\n  /**\n   * Callback invoked whenever scroll offset changes.\n   * @param offset Current scrollTop or scrollLeft.\n   */\n  onScroll?: (offset: number) => void;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollEnd?: () => void;\n  /**\n   * Callback invoked when visible items range changes.\n   */\n  onRangeChange?: (\n    /**\n     * The start index of viewable items.\n     */\n    startIndex: number,\n    /**\n     * The end index of viewable items.\n     */\n    endIndex: number\n  ) => void;\n}\n\n/**\n * Customizable list virtualizer for advanced usage. See {@link VirtualizerProps} and {@link VirtualizerHandle}.\n */\nexport const Virtualizer = <T,>(props: VirtualizerProps<T>): JSX.Element => {\n  let containerRef: HTMLDivElement | undefined;\n  const { itemSize, horizontal = false } = props;\n  props = mergeProps<[Partial<VirtualizerProps<T>>, VirtualizerProps<T>]>(\n    { as: \"div\" },\n    props\n  );\n\n  const store = createVirtualStore(\n    props.data.length,\n    itemSize ?? 40,\n    undefined,\n    undefined,\n    !itemSize\n  );\n  const resizer = createResizer(store, horizontal);\n  const scroller = createScroller(store, horizontal);\n\n  const [rerender, setRerender] = createSignal(store._getStateVersion());\n\n  const unsubscribeStore = store._subscribe(UPDATE_VIRTUAL_STATE, () => {\n    setRerender(store._getStateVersion());\n  });\n\n  const unsubscribeOnScroll = store._subscribe(UPDATE_SCROLL_EVENT, () => {\n    props.onScroll?.(store._getScrollOffset());\n  });\n  const unsubscribeOnScrollEnd = store._subscribe(\n    UPDATE_SCROLL_END_EVENT,\n    () => {\n      props.onScrollEnd?.();\n    }\n  );\n\n  const range = createMemo<ItemsRange>((prev) => {\n    rerender();\n    const next = store._getRange();\n    if (prev && isSameRange(prev, next)) {\n      return prev;\n    }\n    return next;\n  });\n  const scrollDirection = createMemo(\n    () => rerender() && store._getScrollDirection()\n  );\n  const totalSize = createMemo(() => rerender() && store._getTotalSize());\n\n  const jumpCount = createMemo(() => rerender() && store._getJumpCount());\n\n  const overscanedRange = createMemo<ItemsRange>((prev) => {\n    const overscan = props.overscan ?? 4;\n    const [startIndex, endIndex] = range();\n    const next = getOverscanedRange(\n      startIndex,\n      endIndex,\n      overscan,\n      scrollDirection(),\n      props.data.length\n    );\n    if (prev && isSameRange(prev, next)) {\n      return prev;\n    }\n    return next;\n  });\n\n  onMount(() => {\n    if (props.ref) {\n      props.ref({\n        get scrollOffset() {\n          return store._getScrollOffset();\n        },\n        get scrollSize() {\n          return getScrollSize(store);\n        },\n        get viewportSize() {\n          return store._getViewportSize();\n        },\n        getItemOffset: store._getItemOffset,\n        scrollToIndex: scroller._scrollToIndex,\n        scrollTo: scroller._scrollTo,\n        scrollBy: scroller._scrollBy,\n      });\n    }\n\n    const scrollable = props.scrollRef || containerRef!.parentElement!;\n    resizer._observeRoot(scrollable);\n    scroller._observe(scrollable);\n\n    onCleanup(() => {\n      if (props.ref) {\n        props.ref();\n      }\n\n      unsubscribeStore();\n      unsubscribeOnScroll();\n      unsubscribeOnScrollEnd();\n      resizer._dispose();\n      scroller._dispose();\n    });\n  });\n\n  createComputed(\n    on(\n      () => props.data.length,\n      (count) => {\n        if (count !== store._getItemsLength()) {\n          store._update(ACTION_ITEMS_LENGTH_CHANGE, [count, props.shift]);\n        }\n      }\n    )\n  );\n\n  createComputed(\n    on(\n      () => props.startMargin || 0,\n      (value) => {\n        if (value !== store._getStartSpacerSize()) {\n          store._update(ACTION_START_OFFSET_CHANGE, value);\n        }\n      }\n    )\n  );\n\n  createEffect(\n    on(jumpCount, () => {\n      scroller._fixScrollJump();\n    })\n  );\n\n  createEffect(() => {\n    const next = range();\n    props.onRangeChange && props.onRangeChange(next[0], next[1]);\n  });\n\n  return (\n    <Dynamic\n      component={props.as}\n      ref={containerRef}\n      style={{\n        // contain: \"content\",\n        \"overflow-anchor\": \"none\", // opt out browser's scroll anchoring because it will conflict to scroll anchoring of virtualizer\n        flex: \"none\", // flex style can break layout\n        position: \"relative\",\n        visibility: \"hidden\", // TODO replace with other optimization methods\n        width: horizontal ? totalSize() + \"px\" : \"100%\",\n        height: horizontal ? \"100%\" : totalSize() + \"px\",\n        \"pointer-events\": scrollDirection() !== SCROLL_IDLE ? \"none\" : \"auto\",\n      }}\n    >\n      <RangedFor\n        _each={props.data}\n        _range={overscanedRange()}\n        _render={(data, index) => {\n          const offset = createMemo(() => {\n            rerender();\n            return store._getItemOffset(index);\n          });\n          const hide = createMemo(() => {\n            rerender();\n            return store._isUnmeasuredItem(index);\n          });\n\n          return (\n            <ListItem\n              _as={props.item}\n              _index={index}\n              _resizer={resizer._observeItem}\n              _offset={offset()}\n              _hide={hide()}\n              _children={props.children(data(), index)}\n              _isHorizontal={horizontal}\n            />\n          );\n        }}\n      />\n    </Dynamic>\n  );\n};\n","/**\n * @jsxImportSource solid-js\n */\nimport { JSX } from \"solid-js\";\nimport { ViewportComponentAttributes } from \"./types\";\nimport {\n  Virtualizer,\n  VirtualizerHandle,\n  VirtualizerProps,\n} from \"./Virtualizer\";\n\n/**\n * Methods of {@link VList}.\n */\nexport interface VListHandle extends VirtualizerHandle {}\n\n/**\n * Props of {@link VList}.\n */\nexport interface VListProps<T>\n  extends Pick<\n      VirtualizerProps<T>,\n      | \"ref\"\n      | \"data\"\n      | \"children\"\n      | \"overscan\"\n      | \"itemSize\"\n      | \"shift\"\n      | \"horizontal\"\n      | \"onScroll\"\n      | \"onScrollEnd\"\n      | \"onRangeChange\"\n    >,\n    ViewportComponentAttributes {}\n\n/**\n * Virtualized list component. See {@link VListProps} and {@link VListHandle}.\n */\nexport const VList = <T,>(props: VListProps<T>): JSX.Element => {\n  const {\n    ref,\n    data,\n    children,\n    overscan,\n    itemSize,\n    shift,\n    horizontal,\n    onScroll,\n    onScrollEnd,\n    onRangeChange,\n    style,\n    ...attrs\n  } = props;\n\n  return (\n    <div\n      {...attrs}\n      style={{\n        display: horizontal ? \"inline-block\" : \"block\",\n        [horizontal ? \"overflow-x\" : \"overflow-y\"]: \"auto\",\n        contain: \"strict\",\n        width: \"100%\",\n        height: \"100%\",\n        ...props.style,\n      }}\n    >\n      <Virtualizer\n        ref={props.ref}\n        data={props.data}\n        overscan={props.overscan}\n        itemSize={props.itemSize}\n        shift={props.shift}\n        horizontal={horizontal}\n        onScroll={props.onScroll}\n        onScrollEnd={props.onScrollEnd}\n        onRangeChange={props.onRangeChange}\n      >\n        {props.children}\n      </Virtualizer>\n    </div>\n  );\n};\n","/**\n * @jsxImportSource solid-js\n */\nimport {\n  onMount,\n  onCleanup,\n  createEffect,\n  createSignal,\n  createMemo,\n  JSX,\n  on,\n  createComputed,\n} from \"solid-js\";\nimport {\n  SCROLL_IDLE,\n  UPDATE_SCROLL_END_EVENT,\n  UPDATE_VIRTUAL_STATE,\n  getOverscanedRange,\n  createVirtualStore,\n  ACTION_ITEMS_LENGTH_CHANGE,\n} from \"../core/store\";\nimport { createWindowResizer } from \"../core/resizer\";\nimport { createWindowScroller } from \"../core/scroller\";\nimport { ListItem } from \"./ListItem\";\nimport { RangedFor } from \"./RangedFor\";\nimport { isSameRange } from \"./utils\";\nimport { ItemsRange } from \"../core/types\";\n\n// /**\n//  * Methods of {@link WindowVirtualizer}.\n//  */\n// export interface WindowVirtualizerHandle {}\n\n/**\n * Props of {@link WindowVirtualizer}.\n */\nexport interface WindowVirtualizerProps<T> {\n  // /**\n  //  * Get reference to {@link WindowVirtualizerHandle}.\n  //  */\n  // ref?: (handle?: WindowVirtualizerHandle) => void;\n  /**\n   * The data items rendered by this component.\n   */\n  data: T[];\n  /**\n   * The elements renderer function.\n   */\n  children: (data: T, index: number) => JSX.Element;\n  /**\n   * Number of items to render above/below the visible bounds of the list. Lower value will give better performance but you can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.\n   *\n   * - If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.\n   * - If set, you can opt out estimation and use the value as initial item size.\n   */\n  itemSize?: number;\n  /**\n   * While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling.\n   */\n  shift?: boolean;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollEnd?: () => void;\n  /**\n   * Callback invoked when visible items range changes.\n   */\n  onRangeChange?: (\n    /**\n     * The start index of viewable items.\n     */\n    startIndex: number,\n    /**\n     * The end index of viewable items.\n     */\n    endIndex: number\n  ) => void;\n}\n\n/**\n * {@link Virtualizer} controlled by the window scrolling. See {@link WindowVirtualizerProps} and {@link WindowVirtualizer}.\n */\nexport const WindowVirtualizer = <T,>(\n  props: WindowVirtualizerProps<T>\n): JSX.Element => {\n  let containerRef: HTMLDivElement | undefined;\n\n  const {\n    // ref: _ref,\n    data: _data,\n    children: _children,\n    overscan: _overscan,\n    itemSize,\n    shift: _shift,\n    horizontal = false,\n    onScrollEnd: _onScrollEnd,\n    onRangeChange: _onRangeChange,\n  } = props;\n\n  const store = createVirtualStore(\n    props.data.length,\n    itemSize ?? 40,\n    undefined,\n    undefined,\n    !itemSize\n  );\n  const resizer = createWindowResizer(store, horizontal);\n  const scroller = createWindowScroller(store, horizontal);\n\n  const [rerender, setRerender] = createSignal(store._getStateVersion());\n\n  const unsubscribeStore = store._subscribe(UPDATE_VIRTUAL_STATE, () => {\n    setRerender(store._getStateVersion());\n  });\n\n  const unsubscribeOnScrollEnd = store._subscribe(\n    UPDATE_SCROLL_END_EVENT,\n    () => {\n      props.onScrollEnd?.();\n    }\n  );\n\n  const range = createMemo<ItemsRange>((prev) => {\n    rerender();\n    const next = store._getRange();\n    if (prev && isSameRange(prev, next)) {\n      return prev;\n    }\n    return next;\n  });\n  const scrollDirection = createMemo(\n    () => rerender() && store._getScrollDirection()\n  );\n  const totalSize = createMemo(() => rerender() && store._getTotalSize());\n\n  const jumpCount = createMemo(() => rerender() && store._getJumpCount());\n\n  const overscanedRange = createMemo<ItemsRange>((prev) => {\n    const overscan = props.overscan ?? 4;\n    const [startIndex, endIndex] = range();\n    const next = getOverscanedRange(\n      startIndex,\n      endIndex,\n      overscan,\n      scrollDirection(),\n      props.data.length\n    );\n    if (prev && isSameRange(prev, next)) {\n      return prev;\n    }\n    return next;\n  });\n\n  onMount(() => {\n    resizer._observeRoot(containerRef!);\n    scroller._observe(containerRef!);\n\n    onCleanup(() => {\n      unsubscribeStore();\n      unsubscribeOnScrollEnd();\n      resizer._dispose();\n      scroller._dispose();\n    });\n  });\n\n  createComputed(\n    on(\n      () => props.data.length,\n      (len) => {\n        if (len !== store._getItemsLength()) {\n          store._update(ACTION_ITEMS_LENGTH_CHANGE, [len, props.shift]);\n        }\n      }\n    )\n  );\n\n  createEffect(\n    on(jumpCount, () => {\n      scroller._fixScrollJump();\n    })\n  );\n\n  createEffect(() => {\n    const next = range();\n    props.onRangeChange && props.onRangeChange(next[0], next[1]);\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        // contain: \"content\",\n        \"overflow-anchor\": \"none\", // opt out browser's scroll anchoring because it will conflict to scroll anchoring of virtualizer\n        flex: \"none\", // flex style can break layout\n        position: \"relative\",\n        visibility: \"hidden\", // TODO replace with other optimization methods\n        width: horizontal ? totalSize() + \"px\" : \"100%\",\n        height: horizontal ? \"100%\" : totalSize() + \"px\",\n        \"pointer-events\": scrollDirection() !== SCROLL_IDLE ? \"none\" : \"auto\",\n      }}\n    >\n      <RangedFor\n        _each={props.data}\n        _range={overscanedRange()}\n        _render={(data, index) => {\n          const offset = createMemo(() => {\n            rerender();\n            return store._getItemOffset(index);\n          });\n          const hide = createMemo(() => {\n            rerender();\n            return store._isUnmeasuredItem(index);\n          });\n\n          return (\n            <ListItem\n              _index={index}\n              _resizer={resizer._observeItem}\n              _offset={offset()}\n              _hide={hide()}\n              _children={props.children(data(), index)}\n              _isHorizontal={horizontal}\n            />\n          );\n        }}\n      />\n    </div>\n  );\n};\n"],"names":["NULL","min","Math","max","abs","timeout","setTimeout","clamp","value","minValue","maxValue","microtask","queueMicrotask","fn","Promise","resolve","then","once","called","cache","args","UNCACHED","fill","array","length","prepend","key","i","getItemSize","index","size","_sizes","_defaultItemSize","setItemSize","isInitialMeasurement","_computedOffsetIndex","computeOffset","_length","_offsets","top","findIndex","offset","itemOffset","updateCacheLength","isShift","diff","splice","reduce","acc","removed","isBrowser","window","getDocumentElement","document","documentElement","getCurrentDocument","node","ownerDocument","getCurrentWindow","doc","defaultView","isRTLDocument","getComputedStyle","direction","isIOSWebKit","test","navigator","userAgent","isSmoothScrollSupported","style","getOverscanedRange","startIndex","endIndex","overscan","scrollDirection","count","createVirtualStore","elementsCount","itemSize","ssrCount","cacheSnapshot","shouldAutoEstimateItemSize","isSSR","stateVersion","viewportSize","startSpacerSize","scrollOffset","jumpCount","jump","pendingJump","_flushedJump","_scrollDirection","_scrollMode","_frozenRange","_prevRange","_totalMeasuredSize","initCache","subscribers","Set","getRelativeScrollOffset","getRange","prevStartIndex","start","computeRange","getTotalSize","computeTotalSize","getItemOffset","computeStartOffset","_getItemSize","applyJump","j","_getStateVersion","_getCacheSnapshot","takeCacheSnapshot","_getRange","_isUnmeasuredItem","_isInitialMeasurementDone","_hasUnmeasuredItemsInFrozenRange","slice","includes","_getItemOffset","_getItemsLength","_getScrollOffset","_getScrollDirection","_getViewportSize","_getStartSpacerSize","_getTotalSize","_getJumpCount","_flushJump","_subscribe","target","cb","sub","add","delete","_update","type","payload","shouldFlushPendingJump","shouldSync","mutated","flushedJump","delta","distance","relativeOffset","updated","filter","prevSize","measuredCountBeforeStart","measuredSizes","s","isMeasured","prevDefaultItemSize","arr","sorted","sort","a","b","mid","median","estimateDefaultItemSize","UPDATE_VIRTUAL_STATE","forEach","createResizeObserver","ro","_observe","e","observe","_unobserve","unobserve","_dispose","disconnect","normalizeOffset","isHorizontal","createScrollObserver","store","viewport","getScrollOffset","updateScrollOffset","getStartOffset","now","Date","lastScrollTime","wheeling","touching","justTouchEnded","stillMomentumScrolling","onScrollEnd","id","cancel","clearTimeout","debouncedFn","_cancel","debounce","onScroll","onWheel","ctrlKey","timeDelta","deltaX","deltaY","onTouchStart","onTouchEnd","addEventListener","passive","removeEventListener","_fixScrollJump","shift","ListItem","props","elementRef","mergeProps","_as","createEffect","onCleanup","_resizer","_index","createMemo","_isHorizontal","margin","padding","position","_offset","visibility","_hide","display","_$createComponent","Dynamic","component","ref","r$","children","_children","RangedFor","prev","Map","values","list","_each","end","_range","current","items","newData","lookup","get","push","_element","createRoot","dispose","data","createSignal","result","_render","set","_data","entries","has","isSameRange","next","Virtualizer","containerRef","horizontal","as","undefined","resizer","viewportElement","sizeKey","mountedIndexes","WeakMap","resizeObserver","resizes","contentRect","offsetParent","_observeRoot","_observeItem","el","createResizer","scroller","scrollObserver","cancelScroll","scrollOffsetKey","overflowKey","scheduleImperativeScroll","async","getTargetOffset","smooth","waitForMeasurement","queue","reject","promise","unsubscribe","scrollTo","behavior","isMomentumScrolling","_scrollTo","_scrollBy","_scrollToIndex","align","createScroller","rerender","setRerender","unsubscribeStore","unsubscribeOnScroll","_a","call","unsubscribeOnScrollEnd","range","totalSize","overscanedRange","onMount","scrollSize","getScrollSize","scrollToIndex","scrollBy","scrollable","scrollRef","parentElement","createComputed","on","startMargin","onRangeChange","flex","width","height","hide","item","VList","attrs","_el$","_tmpl$","_$spread","_$mergeProps","contain","_$insert","_ref$","WindowVirtualizer","_overscan","_shift","_onScrollEnd","_onRangeChange","windowSizeKey","cleanupOnWindowResize","container","onWindowResize","createWindowResizer","documentBody","body","calcOffsetToViewport","offsetKey","offsetSum","innerWidth","offsetWidth","parent","scroll","opts","targetOffset","finalOffset","requestAnimationFrame","createWindowScroller","len","_$use","setProperty","_$effect","_p$","_v$","_v$2","_v$3","removeProperty","t"],"mappings":"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"}